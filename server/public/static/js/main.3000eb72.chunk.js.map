{"version":3,"sources":["components/NewToDo.js","components/ToDo.js","components/ToDoList.js","components/ToDoFooter.js","client.js","components/ToDoDashboard.js","App.js","serviceWorker.js","index.js"],"names":["NewToDo","state","title","handleChange","event","_this","setState","Object","defineProperty","target","name","value","onKeyPress","key","todo","id","window","uuid","v4","status","props","addNewToDo","react_default","a","createElement","className","placeholder","this","autoFocus","autoComplete","onChange","Component","ToDo","type","onClick","changeToDoStatus","removeToDo","ToDoList","todos","map","components_ToDo","ToDoFooter","pendingToDo","api","checkStatus","response","error","Error","concat","statusText","console","log","parseJSON","json","ToDoDashboard","loadToDoFromServer","success","fetch","headers","Accept","then","data","toConsumableArray","method","body","JSON","stringify","Content-Type","filter","newTodo","assign","getToDoPending","length","components_NewToDo","components_ToDoList","components_ToDoFooter","App","components_ToDoDashboard","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sPA2CeA,6MAvCbC,MAAQ,CACNC,MAAO,MAGTC,aAAe,SAACC,GACdC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GAAgBH,EAAMK,OAAOC,KAAQN,EAAMK,OAAOE,WAGpDC,WAAa,SAACR,GAEZ,GAAkB,UAAdA,EAAMS,IAAiB,CACzB,IAAIC,EAAO,CACTC,GAAIC,OAAOC,KAAKC,KAChBhB,MAAOG,EAAKJ,MAAMC,MAClBiB,OAAQ,WAGVd,EAAKe,MAAMC,WAAWP,GAEtBT,EAAKC,SAAS,CAACJ,MAAO,+EAKxB,OACEoB,EAAAC,EAAAC,cAAA,SACEC,UAAU,WACVC,YAAY,yBACZhB,KAAK,QACLC,MAAOgB,KAAK1B,MAAMC,MAClB0B,WAAS,EACTC,aAAa,MACbjB,WAAYe,KAAKf,WACjBkB,SAAUH,KAAKxB,sBAnCD4B,aCyBPC,MAzBf,SAAcZ,GAcZ,OACEE,EAAAC,EAAAC,cAAA,MAAIC,UAJyB,YAAtBL,EAAMN,KAAKK,OAAuB,OAAS,iBAIlBN,IAAKO,EAAMN,KAAKC,IAC9CO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SAASQ,KAAK,aAC/BX,EAAAC,EAAAC,cAAA,SAAOU,QAZb,WACEd,EAAMe,iBAAiBf,EAAMN,KAAKC,MAWKK,EAAMN,KAAKZ,OAC9CoB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAUS,QAjBlC,WACEd,EAAMgB,WAAWhB,EAAMN,KAAKC,UCYjBsB,MAdf,SAAkBjB,GAChB,OACEE,EAAAC,EAAAC,cAAA,WAASC,UAAU,QACjBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAEVL,EAAMkB,MAAMC,IAAI,SAACzB,GAAD,OACdQ,EAAAC,EAAAC,cAACgB,EAAD,CAAM3B,IAAKC,EAAKC,GAAID,KAAMA,EAAMsB,WAAYhB,EAAMgB,WAAYD,iBAAkBf,EAAMe,wBCGnFM,MAVf,SAAoBrB,GAClB,OACEE,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cACdH,EAAAC,EAAAC,cAAA,cAASJ,EAAMsB,aADjB,IACwCtB,EAAMsB,YAAc,EAAI,OAAS,QADzE,WCLFC,EAAM,iCA6CV,SAASC,EAAYC,GACnB,GAAIA,EAAS1B,QAAU,KAAO0B,EAAS1B,OAAS,IAC9C,OAAO0B,EAEP,IAAMC,EAAQ,IAAIC,MAAJ,cAAAC,OAAwBH,EAASI,aAI/C,MAHAH,EAAM3B,OAAS0B,EAASI,WACxBH,EAAMD,SAAWA,EACjBK,QAAQC,IAAIL,GACNA,EAIV,SAASM,EAAUP,GACjB,OAAOA,EAASQ,WCSHC,6MA3DbrD,MAAQ,CACNqC,MAAO,MAOTiB,mBAAqB,WDdvB,IAAkBC,ICeL,SAAClB,GACRjC,EAAKC,SAAS,CAACgC,MAAOA,KDfnBmB,MAAK,GAAAT,OAAIL,GAAO,CACrBe,QAAS,CACPC,OAAQ,sBAETC,KAAKhB,GACLgB,KAAKR,GACLQ,KAAKJ,MCaRnC,WAAa,SAACP,GACZ,IDXgB+C,ECWZvB,EAAK,GAAAU,OAAAzC,OAAAuD,EAAA,EAAAvD,CAAOF,EAAKJ,MAAMqC,OAAlB,CAAyBxB,IAClCT,EAAKC,SAAS,CAACgC,MAAOA,IDZNuB,ECaL/C,EDZN2C,MAAK,GAAAT,OAAIL,GAAO,CACrBoB,OAAQ,OACRC,KAAMC,KAAKC,UAAUL,GACrBH,QAAS,CACPC,OAAU,mBACVQ,eAAgB,sBAEjBP,KAAKhB,MCQRR,WAAa,SAACrB,GACZ,IDKgB8C,ECLZvB,EAAQjC,EAAKJ,MAAMqC,MAAM8B,OAAO,SAACtD,GAAD,OAAWA,EAAKC,KAAOA,IAC3DV,EAAKC,SAAS,CAACgC,MAAOA,IDINuB,ECHL,CAAC9C,GAAIA,GDIX0C,MAAK,GAAAT,OAAIL,GAAO,CACrBoB,OAAQ,SACRC,KAAMC,KAAKC,UAAUL,GACrBH,QAAS,CACPC,OAAU,mBACVQ,eAAgB,sBAEjBP,KAAKhB,MCRRT,iBAAmB,SAACpB,GAClB,IAAIuB,EAAQjC,EAAKJ,MAAMqC,MAAMC,IAAI,SAACzB,GAChC,GAAIA,EAAKC,KAAOA,EAAI,CAClB,IAAIsD,EAAU9D,OAAO+D,OAAO,GAAIxD,EAAM,CACpCK,OAAwB,YAAhBL,EAAKK,OAAuB,YAAc,YAGpD,ODlBY0C,ECiBDQ,EDhBVZ,MAAK,GAAAT,OAAIL,GAAO,CACrBoB,OAAQ,MACRC,KAAMC,KAAKC,UAAUL,GACrBH,QAAS,CACPC,OAAU,mBACVQ,eAAgB,sBAEjBP,KAAKhB,GCUKyB,EAEP,OAAOvD,EDpBf,IAAoB+C,ICuBhBxD,EAAKC,SAAS,CAACgC,MAAOA,OAGxBiC,eAAiB,WACf,OAAOlE,EAAKJ,MAAMqC,MAAM8B,OAAO,SAACtD,GAAD,MAA2B,YAAhBA,EAAKK,SAAuBqD,2FArCtE7C,KAAK4B,sDAyCL,OACEjC,EAAAC,EAAAC,cAAA,WAASC,UAAU,WACjBH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAACiD,EAAD,CAASpD,WAAYM,KAAKN,aAC1BC,EAAAC,EAAAC,cAACkD,EAAD,CAAUpC,MAAOX,KAAK1B,MAAMqC,MAAOF,WAAYT,KAAKS,WAAYD,iBAAkBR,KAAKQ,mBACvFb,EAAAC,EAAAC,cAACmD,EAAD,CAAYjC,YAAaf,KAAK4C,4BAtDZxC,aCIb6C,MANf,WACE,OACEtD,EAAAC,EAAAC,cAACqD,EAAD,OCMgBC,QACW,cAA7B9D,OAAO+D,SAASC,UAEe,UAA7BhE,OAAO+D,SAASC,UAEhBhE,OAAO+D,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.3000eb72.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass NewToDo extends Component {\r\n\r\n  state = {\r\n    title: ''\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    this.setState({[event.target.name] : event.target.value});\r\n  };\r\n\r\n  onKeyPress = (event) => {\r\n    // Capture Enter Key\r\n    if (event.key === 'Enter') {\r\n      let todo = {\r\n        id: window.uuid.v4(),\r\n        title: this.state.title,\r\n        status: 'pending'\r\n      };\r\n\r\n      this.props.addNewToDo(todo);\r\n      // Empty title\r\n      this.setState({title: ''});\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <input\r\n        className=\"new-todo\"\r\n        placeholder=\"What needs to be done?\"\r\n        name=\"title\"\r\n        value={this.state.title}\r\n        autoFocus\r\n        autoComplete=\"off\"\r\n        onKeyPress={this.onKeyPress}\r\n        onChange={this.handleChange}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewToDo;","import React from 'react';\r\n\r\nfunction ToDo(props) {\r\n\r\n  function removeToDo() {\r\n    props.removeToDo(props.todo.id)\r\n  }\r\n\r\n  function changeToDoStatus() {\r\n    props.changeToDoStatus(props.todo.id);\r\n  }\r\n\r\n  function getClassNames() {\r\n    return props.todo.status === 'pending' ? 'todo' : 'todo completed';\r\n  }\r\n\r\n  return (\r\n    <li className={getClassNames()} key={props.todo.id}>\r\n      <div className=\"view\">\r\n        <input className=\"toggle\" type=\"checkbox\" />\r\n        <label onClick={changeToDoStatus}>{props.todo.title}</label>\r\n        <button className=\"destroy\" onClick={removeToDo}/>\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default ToDo;","import React from 'react';\r\nimport ToDo from './ToDo';\r\n\r\nfunction ToDoList(props) {\r\n  return (\r\n    <section className=\"main\">\r\n      <ul className=\"todo-list\">\r\n        {\r\n          props.todos.map((todo) => (\r\n            <ToDo key={todo.id} todo={todo} removeToDo={props.removeToDo} changeToDoStatus={props.changeToDoStatus} />\r\n          ))\r\n        }\r\n      </ul>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default ToDoList;","import React from 'react';\r\n\r\nfunction ToDoFooter(props) {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <span className=\"todo-count\">\r\n        <strong>{props.pendingToDo}</strong> {props.pendingToDo < 1 ? 'item' : 'items'} left\r\n      </span>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default ToDoFooter;","let api = 'http://localhost:3003/api/todo';\n\nfunction getToDos(success) {\n  return fetch(`${api}`, {\n    headers: {\n      Accept: 'application/json',\n    },\n  }).then(checkStatus)\n    .then(parseJSON)\n    .then(success);\n}\n\nfunction createToDo(data) {\n  return fetch(`${api}`, {\n    method: 'post',\n    body: JSON.stringify(data),\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    },\n  }).then(checkStatus);\n}\n\nfunction updateToDo(data) {\n  return fetch(`${api}`, {\n    method: 'put',\n    body: JSON.stringify(data),\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    },\n  }).then(checkStatus);\n}\n\nfunction deleteToDo(data) {\n  return fetch(`${api}`, {\n    method: 'delete',\n    body: JSON.stringify(data),\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    },\n  }).then(checkStatus);\n}\n\nfunction checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  } else {\n    const error = new Error(`HTTP Error ${response.statusText}`);\n    error.status = response.statusText;\n    error.response = response;\n    console.log(error);\n    throw error;\n  }\n}\n\nfunction parseJSON(response) {\n  return response.json();\n}\n\nexport {\n  getToDos,\n  createToDo,\n  updateToDo,\n  deleteToDo,\n};\n","import React, {Component} from 'react';\r\nimport NewToDo from './NewToDo';\r\nimport ToDoList from './ToDoList';\r\nimport ToDoFooter from './ToDoFooter';\r\nimport { getToDos, createToDo, deleteToDo, updateToDo } from '../client';\r\n\r\nclass ToDoDashboard extends Component {\r\n\r\n  state = {\r\n    todos: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.loadToDoFromServer();\r\n  }\r\n\r\n  loadToDoFromServer = () => {\r\n    getToDos((todos) => {\r\n      this.setState({todos: todos});\r\n    });\r\n  };\r\n\r\n  addNewToDo = (todo) => {\r\n    let todos = [...this.state.todos, todo];\r\n    this.setState({todos: todos});\r\n    createToDo(todo);\r\n  };\r\n\r\n  removeToDo = (id) => {\r\n    let todos = this.state.todos.filter((todo) => (todo.id !== id));\r\n    this.setState({todos: todos});\r\n    deleteToDo({id: id});\r\n  };\r\n\r\n  changeToDoStatus = (id) => {\r\n    let todos = this.state.todos.map((todo) => {\r\n      if (todo.id === id) {\r\n        let newTodo = Object.assign({}, todo, {\r\n          status: todo.status === 'pending' ? 'completed' : 'pending',\r\n        });\r\n        updateToDo(newTodo);\r\n        return newTodo;\r\n      } else {\r\n        return todo;\r\n      }\r\n    });\r\n    this.setState({todos: todos});\r\n  };\r\n\r\n  getToDoPending = () => {\r\n    return this.state.todos.filter((todo) => (todo.status === 'pending')).length;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"todoapp\">\r\n        <header className=\"header\">\r\n          <h1>todos</h1>\r\n          <NewToDo addNewToDo={this.addNewToDo}/>\r\n          <ToDoList todos={this.state.todos} removeToDo={this.removeToDo} changeToDoStatus={this.changeToDoStatus} />\r\n          <ToDoFooter pendingToDo={this.getToDoPending()} />\r\n        </header>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ToDoDashboard;","import React from 'react';\nimport './App.css';\nimport ToDoDashboard from './components/ToDoDashboard';\n\nfunction App() {\n  return (\n    <ToDoDashboard />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}